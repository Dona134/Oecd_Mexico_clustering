df <- data.frame(Exam_name, Mark, Credits, No_of_times)
# Compute weighted average
weighted_avg <- weighted.mean(career_data$Mark, w = career_data$Credits)
# Create a data frame
career_data <- data.frame(
Exam_name = c("Exam1", "Exam2", "Exam3", "Exam4"),
Mark = c(85, 92, 78, 89),
Credits = c(3, 4, 3, 2),
No_of_times = c(1, 2, 1, 3)
)
# Create a data frame
career_data <- data.frame(
Exam_name = c("Statistics", "CS", "Math", "Economics"),
Mark = c(85, 92, 78, 89),
Credits = c(3, 4, 3, 2),
No_of_times = c(1, 2, 1, 3)
)
# Create a data frame
career_data <- data.frame(
Exam_name = c("Statistics", "CS", "Math", "Economics"),
Mark = c(85, 92, 78, 89),
Credits = c(3, 4, 3, 2),
No_of_times = c(1, 2, 1, 3)
)
# Compute weighted average
weighted_avg <- weighted.mean(career_data$Mark, w = career_data$Credits)
# Create a data frame
career_data <- data.frame(
Exam_name = c("Statistics", "CS", "Math", "Economics"),
Mark = c(85, 92, 78, 89),
Credits = c(3, 4, 3, 2),
No_of_times = c(1, 2, 1, 3)
)
career_data <- data.frame(Exam_name, Mark, Credits, No_of_times)
No_of_times <- c(2, 2, 3, 4)
career_data <- data.frame(Exam_name, Mark, Credits, No_of_times)
# Compute weighted average
weighted_avg <- weighted.mean(career_data$Mark, w = career_data$Credits)
print (career_data)
print (career_data)
x <- matrix(rnorm(200), 20, 10) #Here we create a 20 by 10 matrix of Normal random numbers.
print(apply(x, MARGIN = 2, FUN = mean)) #Compute the mean of each column: MARGIN = 2.
print(apply(x, MARGIN = 1, FUN = mean)) #Compute the mean of each row: MARGIN = 2.
test1 <- function(){
teststring <- 'This object is destroyed as soon as the function ends!'
}
test1
source("my_regr_coeff.R")
x <- c (44, 23, 10, 45, 70, 90)
mymedian(x)
mymedian <- function (x){
sorted_x <- sort(x)
n <- length(x)
if (n%%2 == 1) {
return sorted_x([(n+1)/2])
mymedian <- function (x){
sorted_x <- sort(x)
n <- length(x)
if (n%2 == 1) {
x <- c (44, 23, 10, 45, 70, 90)
sort(x)
mygrades <- c (44, 23, 10, 45, 70, 90)
mymedian(mygrades)
mymedian <- function (x){
sorted_x <- sort(x)
n <- length(x)
if (n%%2 == 1) {
return sorted_x([(n+1)/2])
mymedian <- function (x){
sorted_x <- sort(x)
n <- length(x)
if (n%%2 == 1) {
return (sorted_x([(n+1)/2]))
custom_mean <-function (x){
n <- length(x)
return (sum(x)/n)
}
custom_median <- function (x){
sorted_x <- sort(x)
n <- length(x)
if (n%%2 == 1) {
return (sorted_x[(n+1)/2])
}
else {
return((sorted_x[n/2]+sorted_x[n/2+1])/2
}
custom_mean <-function (x){
n <- length(x)
return (sum(x)/n)
}
custom_median <- function (x){
sorted_x <- sort(x)
n <- length(x)
if (n%%2 == 1) {
return (sorted_x[(n+1)/2])
}
else {
return((sorted_x[n/2]+sorted_x[n/2+1])/2)
}
}
custom_sd <- function(x){
n <- length(x)
mean_x <- custom_mean(x)
sum_sqdiff <- sum((x-mean_x)^2)
return (sqrt(sum_sqdiff/(n-1)))
}
mystat <- function (mymarks) {
n <- length(mymarks)
mean_value <- custom_mean(mymarks)
sd_value <- custom_sd(mymarks)
median_value <- custom_median(mymarks)
upplim <- mean_value + 1.96*sd_value/sqrt(n)
lowlim <- mean_value - 1.96*sd_value/sqrt(n)
result <- list (
mean = mean_value,
conf_interval = c(lower = lowlim, upper = upplim),
median = median_value,
standard_dev = sd_value
)
return (result)
}
myset <- c (44, 23, 10, 45, 70, 90)
statistics <- mystat(myset)
print (statistics)
custom_mean <-function (x){
n <- length(x)
return (sum(x)/n)
}
custom_median <- function (x){
sorted_x <- sort(x)
n <- length(x)
if (n%%2 == 1) {
return (sorted_x[(n+1)/2])
}
else {
return((sorted_x[n/2]+sorted_x[n/2+1])/2)
}
}
custom_sd <- function(x){
n <- length(x)
mean_x <- custom_mean(x)
sum_sqdiff <- sum((x-mean_x)^2)
return (sqrt(sum_sqdiff/(n-1)))
}
mystat <- function (mymarks) {
n <- length(mymarks)
mean_value <- custom_mean(mymarks)
sd_value <- custom_sd(mymarks)
median_value <- custom_median(mymarks)
upplim <- mean_value + 1.96*sd_value/sqrt(n)
lowlim <- mean_value - 1.96*sd_value/sqrt(n)
result <- list (
mean = mean_value,
conf_interval = c(lower = lowlim, upper = upplim),
median = median_value,
standard_dev = sd_value
)
return (result)
}
myset <- c (44, 23, 10, 45, 70, 90)
statistics <- mystat(myset)
print (statistics)
custom_mean <-function (x){
n <- length(x)
return (sum(x)/n)
}
custom_median <- function (x){
sorted_x <- sort(x)
n <- length(x)
if (n%%2 == 1) {
return (sorted_x[(n+1)/2])
}
else {
return((sorted_x[n/2]+sorted_x[n/2+1])/2)
}
}
custom_sd <- function(x){
n <- length(x)
mean_x <- custom_mean(x)
sum_sqdiff <- sum((x-mean_x)^2)
return (sqrt(sum_sqdiff/(n-1)))
}
mystat <- function (mymarks) {
n <- length(mymarks)
mean_value <- custom_mean(mymarks)
sd_value <- custom_sd(mymarks)
median_value <- custom_median(mymarks)
upplim <- mean_value + 1.96*sd_value/sqrt(n)
lowlim <- mean_value - 1.96*sd_value/sqrt(n)
result <- list (
mean = mean_value,
conf_interval = c(lower = lowlim, upper = upplim),
median = median_value,
standard_dev = sd_value
)
return (result)
}
myset <- c (44, 23, 10, 45, 70, 90, 100)
statistics <- mystat(myset)
print (statistics)
install.packages("devtools")
library(devtools)
create_package("C:/Users/Aser/OneDrive - nu.edu.kz/Рабочий стол/Dona/UNIMI/coding for DS and DM/R Assignment/mypackage")
calculate_factorial(5)
generate_normal_sample <- function(n, mean, sd) {
set.seed(123)  # Set seed for reproducibility
return(rnorm(n, mean, sd))
}
calculate_factorial <- function(n) {
if (n == 0 || n == 1) {
return(1)
} else {
return(n * calculate_factorial(n - 1))
}
}
calculate_factorial(5)
generate_normal_sample(10, 0, 1)
load_all()
calculate_factorial(5)
example("calculate_factorial")
# Function1.R
#' Function 1: Calculate the factorial of a non-negative integer.
#'
#' @param n Non-negative integer.
#' @return The factorial of the input integer.
#' @examples
#' calculate_factorial(5)
calculate_factorial <- function(n) {
if (n == 0 || n == 1) {
return(1)
} else {
return(n * calculate_factorial(n - 1))
}
}
usethis::use_mit_license(name = "Aidana")
install.packages("devtools")
library(devtools)
create_package("C:/Users/Aser/OneDrive - nu.edu.kz/Рабочий стол/Dona/UNIMI/coding for DS and DM/R Assignment/cdfpackage")
';.'
gjk(hi)
setwd(C:/Users/Aser/OneDrive - nu.edu.kz/Рабочий стол/Dona/my ds projects/oecd_japan)
setwd("C:/Users/Aser/OneDrive - nu.edu.kz/Рабочий стол/Dona/my ds projects/oecd_japan")
knitr::opts_chunk$set(echo = TRUE)
library(haven)
library(car)
install.packages("car")
library(haven)
library(car)
oecd = read.table("oecd_japan.txt", header = TRUE, dec = ".")
oecd = read.table("oecd_japan.txt", header = TRUE, dec = ".")
head(oecd)
oecd = read.table("oecd_japan.txt", header = TRUE, dec = ".")
rownames(oecd)=oecd$region
head(oecd)
oecd = read.table("oecd_japan.txt", header = TRUE, dec = ".")
rownames(oecd)=oecd$region
oecd<-oecd[,-1]
head(oecd)
oecd = read.table("oecd_japan.txt", header = TRUE, dec = ".")
rownames(oecd)=oecd$region
oecd<-oecd[,-1]
head(oecd)
summary(oecd)
oecd = read.table("oecd_japan.txt", header = TRUE, dec = ",")
rownames(oecd)=oecd$region
oecd<-oecd[,-1]
head(oecd)
summary(oecd)
head(scale(oecd))
head(scale(oecd))
summary(scale(oecd))
ds<-dist(scale(oecd))
ds<-dist(scale(oecd))
print(ds)
agglo <- function(hc){
data.frame(row.names=paste0("Cluster",seq_along(hc$height)),
height=hc$height,
components=ifelse(hc$merge<0,
hc$labels[abs(hc$merge)], paste0("Cluster",hc$merge)),
stringsAsFactors=FALSE) }
opar <- par(mfrow = c(1, 3))
### average linkage
h1<-hclust(ds, method="average")
agglo(h1)
opar <- par(mfrow = c(1, 3))
### average linkage
h1<-hclust(ds, method="average")
agglo(h1)
plot(h1, main="average linkage")
### complete linkage
h2<-hclust(ds, method="complete")
agglo(h2)
plot(h2, main="complete linkage")
### legame ward
h3<-hclust(ds, method="ward.D2")
agglo(h3)
plot(h3, main="Ward linkage")
average <- cutree(h1, k=5)
complete<- cutree(h2, k=5)
ward<- cutree(h3, k=5)
table(average,complete)
average <- cutree(h1, k=5)
complete<- cutree(h2, k=5)
ward<- cutree(h3, k=5)
table(average,complete)
table(average,ward)
table(complete,ward)
plot(h2, main="complete linkage")
plot(h3, main="Ward linkage")
plot(oecd, col=h2cluster, main="complete likage")
### dendrograms
plot(h1, main="Complete linkage")
rect.hclust(h2, 5)
h2cluster <- cutree(h2, k=5)
h2cluster
plot(oecd, col=h2cluster, main="complete likage")
knitr::opts_chunk$set(echo = TRUE)
install.packages("car")
library(haven)
library(car)
oecd = read.table("oecd_mexico.txt", header = TRUE, dec = ",")
rownames(oecd)=oecd$region
oecd<-oecd[,-1]
head(oecd)
summary(oecd)
summary(scale(oecd))
ds<-dist(scale(oecd))
print(ds)
agglo <- function(hc){
data.frame(row.names=paste0("Cluster",seq_along(hc$height)),
height=hc$height,
components=ifelse(hc$merge<0,
hc$labels[abs(hc$merge)], paste0("Cluster",hc$merge)),
stringsAsFactors=FALSE) }
opar <- par(mfrow = c(1, 3))
### average linkage
h1<-hclust(ds, method="average")
agglo(h1)
plot(h1, main="average linkage")
### complete linkage
h2<-hclust(ds, method="complete")
agglo(h2)
plot(h2, main="complete linkage")
### legame ward
h3<-hclust(ds, method="ward.D2")
agglo(h3)
plot(h3, main="Ward linkage")
average <- cutree(h1, k=5)
complete<- cutree(h2, k=5)
ward<- cutree(h3, k=5)
table(average,complete)
table(average,ward)
table(complete,ward)
### dendrograms
plot(h1, main="Complete linkage")
rect.hclust(h2, 5)
h2cluster <- cutree(h2, k=5)
h2cluster
plot(oecd, col=h2cluster, main="complete likage")
install.packages("car")
knitr::opts_chunk$set(echo = TRUE)
install.packages("car")
library(haven)
library(car)
install.packages("car")
oecd = read.table("oecd_mexico.txt", header = TRUE, dec = ",")
rownames(oecd)=oecd$region
oecd<-oecd[,-1]
head(oecd)
summary(oecd)
summary(scale(oecd))
ds<-dist(scale(oecd))
print(ds)
agglo <- function(hc){
data.frame(row.names=paste0("Cluster",seq_along(hc$height)),
height=hc$height,
components=ifelse(hc$merge<0,
hc$labels[abs(hc$merge)], paste0("Cluster",hc$merge)),
stringsAsFactors=FALSE) }
opar <- par(mfrow = c(1, 3))
### average linkage
h1<-hclust(ds, method="average")
agglo(h1)
plot(h1, main="average linkage")
### complete linkage
h2<-hclust(ds, method="complete")
agglo(h2)
plot(h2, main="complete linkage")
### legame ward
h3<-hclust(ds, method="ward.D2")
agglo(h3)
plot(h3, main="Ward linkage")
average <- cutree(h1, k=5)
complete<- cutree(h2, k=5)
ward<- cutree(h3, k=5)
table(average,complete)
table(average,ward)
table(complete,ward)
### dendrograms
plot(h1, main="Complete linkage")
rect.hclust(h2, 5)
h2cluster <- cutree(h2, k=5)
h2cluster
plot(oecd, col=h2cluster, main="complete likage")
